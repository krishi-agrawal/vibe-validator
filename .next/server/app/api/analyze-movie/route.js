"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze-movie/route";
exports.ids = ["app/api/analyze-movie/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-movie%2Froute&page=%2Fapi%2Fanalyze-movie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-movie%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-movie%2Froute&page=%2Fapi%2Fanalyze-movie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-movie%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var C_Users_krish_Desktop_vibe_validator_app_api_analyze_movie_route_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/api/analyze-movie/route.ts */ \"(rsc)/./app/api/analyze-movie/route.ts\");\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze-movie/route\",\n        pathname: \"/api/analyze-movie\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze-movie/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\krish\\\\Desktop\\\\vibe-validator\\\\app\\\\api\\\\analyze-movie\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_krish_Desktop_vibe_validator_app_api_analyze_movie_route_ts__WEBPACK_IMPORTED_MODULE_2__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/analyze-movie/route\";\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplLW1vdmllJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplLW1vdmllJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZS1tb3ZpZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNrcmlzaCU1Q0Rlc2t0b3AlNUN2aWJlLXZhbGlkYXRvciU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDa3Jpc2glNUNEZXNrdG9wJTVDdmliZS12YWxpZGF0b3ImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQzBDO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ2lKOztBQUVqSiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtdmFsLz83NmRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXGtyaXNoXFxcXERlc2t0b3BcXFxcdmliZS12YWxpZGF0b3JcXFxcYXBwXFxcXGFwaVxcXFxhbmFseXplLW1vdmllXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXplLW1vdmllL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZS1tb3ZpZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYW5hbHl6ZS1tb3ZpZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGtyaXNoXFxcXERlc2t0b3BcXFxcdmliZS12YWxpZGF0b3JcXFxcYXBwXFxcXGFwaVxcXFxhbmFseXplLW1vdmllXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FuYWx5emUtbW92aWUvcm91dGVcIjtcbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-movie%2Froute&page=%2Fapi%2Fanalyze-movie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-movie%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analyze-movie/route.ts":
/*!****************************************!*\
  !*** ./app/api/analyze-movie/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n// app/api/analyze-movie/route.ts\n\n// Hugging Face models for movie analysis - using more powerful models\nconst HF_MOVIE_ANALYSIS_MODEL = \"https://api-inference.huggingface.co/models/moonshotai/Kimi-K2-Instruct\";\nconst HF_BACKUP_MODEL = \"https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.1\";\nconst HF_ALTERNATIVE_MODEL = \"https://api-inference.huggingface.co/models/google/flan-t5-large\";\nasync function analyzeMovieWithHF(movieName) {\n    if (!process.env.HUGGINGFACE_API_KEY) {\n        throw new Error(\"Missing Hugging Face API key\");\n    }\n    console.log(\"\\uD83C\\uDFAC Analyzing movie with Hugging Face:\", movieName);\n    // Try multiple models in order of preference\n    const models = [\n        HF_MOVIE_ANALYSIS_MODEL,\n        HF_BACKUP_MODEL,\n        HF_ALTERNATIVE_MODEL\n    ];\n    for (const model of models){\n        try {\n            const result = await tryMovieAnalysisWithModel(movieName, model);\n            if (result && result.summary && result.summary.length > 20) {\n                console.log(`✅ Successfully analyzed with model: ${model}`);\n                return result;\n            }\n        } catch (error) {\n            console.log(`❌ Model ${model} failed, trying next...`);\n            continue;\n        }\n    }\n    // If all HF models fail, use intelligent analysis\n    console.log(\"\\uD83D\\uDCDD All HF models failed, using intelligent analysis\");\n    return intelligentMovieAnalysis(movieName);\n}\nasync function tryMovieAnalysisWithModel(movieName, modelUrl) {\n    const isLlamaModel = modelUrl.includes(\"llama\") || modelUrl.includes(\"mistral\");\n    let prompt;\n    if (isLlamaModel) {\n        // Format for Llama/Mistral models\n        prompt = `<s>[INST] You are a movie expert. Analyze the movie \"${movieName}\" and provide a comprehensive analysis.\r\n\r\nPlease provide detailed information about:\r\n1. A brief plot summary (2-3 sentences)\r\n2. Main themes (3-5 key themes)\r\n3. Primary genres (2-4 genres)\r\n4. Cultural keywords and elements (3-5 keywords)\r\n5. Target audience and demographics\r\n\r\nRespond in this exact JSON format:\r\n{\r\n  \"summary\": \"brief plot summary here\",\r\n  \"themes\": [\"theme1\", \"theme2\", \"theme3\"],\r\n  \"genres\": [\"genre1\", \"genre2\"],\r\n  \"culturalKeywords\": [\"keyword1\", \"keyword2\", \"keyword3\"]\r\n}\r\n\r\nOnly respond with valid JSON, no additional text. [/INST]`;\n    } else {\n        // Format for T5 and other models\n        prompt = `Analyze the movie \"${movieName}\". Provide a JSON response with summary, themes array, genres array, and culturalKeywords array. Movie analysis:`;\n    }\n    const response = await fetch(modelUrl, {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${process.env.HUGGINGFACE_API_KEY}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            inputs: prompt,\n            parameters: {\n                max_new_tokens: isLlamaModel ? 400 : 250,\n                temperature: 0.3,\n                do_sample: true,\n                top_p: 0.9,\n                return_full_text: false,\n                stop: isLlamaModel ? [\n                    \"</s>\",\n                    \"[INST]\"\n                ] : undefined\n            }\n        })\n    });\n    console.log(`📡 ${modelUrl} response status:`, response.status);\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`❌ ${modelUrl} error:`, errorText);\n        throw new Error(`Model API error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log(`📦 ${modelUrl} result:`, JSON.stringify(result, null, 2));\n    let generatedText = \"\";\n    if (Array.isArray(result) && result.length > 0) {\n        generatedText = result[0].generated_text || \"\";\n    } else if (typeof result === \"object\" && result.generated_text) {\n        generatedText = result.generated_text;\n    }\n    // Try to parse JSON from the response\n    const jsonMatch = generatedText.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n        try {\n            const parsed = JSON.parse(jsonMatch[0]);\n            if (parsed.summary && parsed.themes && parsed.genres && parsed.culturalKeywords) {\n                return parsed;\n            }\n        } catch (parseError) {\n            console.log(\"JSON parse failed, trying text parsing...\");\n        }\n    }\n    // Fallback: parse the text response manually\n    return parseMovieAnalysisFromText(generatedText, movieName);\n}\nfunction intelligentMovieAnalysis(movieName) {\n    console.log(\"\\uD83D\\uDCDD Using intelligent movie analysis for:\", movieName);\n    // Basic movie database - in a real app, you'd use TMDB API or similar\n    const movieDatabase = {\n        \"blade runner 2049\": {\n            summary: \"A visually stunning sci-fi masterpiece exploring themes of identity, humanity, and what it means to be alive in a dystopian future.\",\n            themes: [\n                \"identity\",\n                \"humanity\",\n                \"artificial intelligence\",\n                \"dystopia\",\n                \"existentialism\"\n            ],\n            genres: [\n                \"sci-fi\",\n                \"drama\",\n                \"thriller\"\n            ],\n            culturalKeywords: [\n                \"cyberpunk\",\n                \"neo-noir\",\n                \"philosophical\",\n                \"visual spectacle\",\n                \"Denis Villeneuve\"\n            ]\n        },\n        \"the grand budapest hotel\": {\n            summary: \"A whimsical and meticulously crafted comedy-drama about friendship, loyalty, and the end of an era, told through Wes Anderson's distinctive visual style.\",\n            themes: [\n                \"friendship\",\n                \"nostalgia\",\n                \"European culture\",\n                \"class\",\n                \"loyalty\"\n            ],\n            genres: [\n                \"comedy\",\n                \"drama\",\n                \"adventure\"\n            ],\n            culturalKeywords: [\n                \"Wes Anderson\",\n                \"symmetrical\",\n                \"pastel colors\",\n                \"European\",\n                \"whimsical\"\n            ]\n        },\n        \"spirited away\": {\n            summary: \"A magical coming-of-age story about a young girl navigating a spirit world, exploring themes of environmentalism, family, and growing up.\",\n            themes: [\n                \"coming of age\",\n                \"environmentalism\",\n                \"family\",\n                \"courage\",\n                \"tradition vs modernity\"\n            ],\n            genres: [\n                \"animation\",\n                \"fantasy\",\n                \"family\"\n            ],\n            culturalKeywords: [\n                \"Studio Ghibli\",\n                \"Japanese folklore\",\n                \"hand-drawn animation\",\n                \"Miyazaki\",\n                \"magical realism\"\n            ]\n        },\n        \"parasite\": {\n            summary: \"A darkly comic thriller examining class inequality and social stratification through the story of two families from different economic backgrounds.\",\n            themes: [\n                \"class struggle\",\n                \"inequality\",\n                \"social commentary\",\n                \"family dynamics\",\n                \"survival\"\n            ],\n            genres: [\n                \"thriller\",\n                \"drama\",\n                \"dark comedy\"\n            ],\n            culturalKeywords: [\n                \"Korean cinema\",\n                \"Bong Joon-ho\",\n                \"social inequality\",\n                \"dark humor\",\n                \"architectural symbolism\"\n            ]\n        }\n    };\n    const lowerMovieName = movieName.toLowerCase();\n    // Check if we have specific data for this movie\n    if (movieDatabase[lowerMovieName]) {\n        return movieDatabase[lowerMovieName];\n    }\n    // Generate intelligent fallback based on movie name patterns\n    return generateFallbackAnalysis(movieName);\n}\nfunction generateFallbackAnalysis(movieName) {\n    // Basic pattern matching for common movie types\n    const lowerName = movieName.toLowerCase();\n    let themes = [\n        \"drama\",\n        \"character development\"\n    ];\n    let genres = [\n        \"drama\"\n    ];\n    let culturalKeywords = [\n        \"cinematic\",\n        \"storytelling\"\n    ];\n    // Pattern-based analysis\n    if (lowerName.includes(\"star\") || lowerName.includes(\"space\") || lowerName.includes(\"galaxy\")) {\n        themes.push(\"adventure\", \"heroism\", \"good vs evil\");\n        genres.push(\"sci-fi\", \"adventure\");\n        culturalKeywords.push(\"space opera\", \"special effects\");\n    } else if (lowerName.includes(\"love\") || lowerName.includes(\"heart\")) {\n        themes.push(\"romance\", \"relationships\", \"love\");\n        genres.push(\"romance\", \"drama\");\n        culturalKeywords.push(\"romantic\", \"emotional\");\n    } else if (lowerName.includes(\"dark\") || lowerName.includes(\"night\")) {\n        themes.push(\"mystery\", \"suspense\", \"psychological\");\n        genres.push(\"thriller\", \"mystery\");\n        culturalKeywords.push(\"atmospheric\", \"noir\");\n    }\n    return {\n        summary: `A compelling ${genres[0]} that explores themes of ${themes.slice(0, 3).join(\", \")}, offering audiences a thoughtful cinematic experience.`,\n        themes: themes.slice(0, 5),\n        genres: genres.slice(0, 3),\n        culturalKeywords: culturalKeywords.slice(0, 5)\n    };\n}\nfunction parseMovieAnalysis(analysisText, movieName) {\n    // Extract themes, genres, and keywords from the generated text\n    const themes = extractListFromText(analysisText, [\n        \"theme\",\n        \"explores\",\n        \"about\",\n        \"deals with\"\n    ]);\n    const genres = extractGenres(analysisText);\n    const culturalKeywords = extractCulturalKeywords(analysisText);\n    return {\n        summary: analysisText.substring(0, 200) + \"...\",\n        themes: themes.length > 0 ? themes : [\n            \"drama\",\n            \"human nature\"\n        ],\n        genres: genres.length > 0 ? genres : [\n            \"drama\"\n        ],\n        culturalKeywords: culturalKeywords.length > 0 ? culturalKeywords : [\n            \"cinematic\",\n            \"artistic\"\n        ]\n    };\n}\nfunction extractListFromText(text, keywords) {\n    const items = [];\n    const sentences = text.toLowerCase().split(/[.!?]/);\n    sentences.forEach((sentence)=>{\n        keywords.forEach((keyword)=>{\n            if (sentence.includes(keyword)) {\n                // Simple extraction of potential themes\n                const words = sentence.split(\" \");\n                words.forEach((word)=>{\n                    if (word.length > 3 && ![\n                        \"the\",\n                        \"and\",\n                        \"that\",\n                        \"with\",\n                        \"this\"\n                    ].includes(word)) {\n                        items.push(word.replace(/[^a-zA-Z]/g, \"\"));\n                    }\n                });\n            }\n        });\n    });\n    return [\n        ...new Set(items)\n    ].slice(0, 5);\n}\nfunction extractGenres(text) {\n    const commonGenres = [\n        \"action\",\n        \"adventure\",\n        \"comedy\",\n        \"drama\",\n        \"horror\",\n        \"mystery\",\n        \"romance\",\n        \"sci-fi\",\n        \"thriller\",\n        \"fantasy\",\n        \"animation\",\n        \"documentary\",\n        \"musical\"\n    ];\n    const foundGenres = commonGenres.filter((genre)=>text.toLowerCase().includes(genre) || text.toLowerCase().includes(genre.replace(\"-\", \" \")));\n    return foundGenres.length > 0 ? foundGenres : [\n        \"drama\"\n    ];\n}\nfunction extractCulturalKeywords(text) {\n    const culturalTerms = [\n        \"visual\",\n        \"cinematic\",\n        \"artistic\",\n        \"cultural\",\n        \"social\",\n        \"emotional\",\n        \"psychological\",\n        \"philosophical\",\n        \"symbolic\",\n        \"narrative\",\n        \"aesthetic\"\n    ];\n    const foundTerms = culturalTerms.filter((term)=>text.toLowerCase().includes(term));\n    return foundTerms.length > 0 ? foundTerms : [\n        \"cinematic\",\n        \"artistic\"\n    ];\n}\nfunction generateVibeParameters(movieAnalysis) {\n    const { themes, genres, culturalKeywords } = movieAnalysis;\n    // Map themes and genres to Qloo-style parameters\n    const audienceMap = {\n        \"sci-fi\": [\n            \"tech enthusiasts\",\n            \"sci-fi fans\",\n            \"young adults\"\n        ],\n        \"romance\": [\n            \"couples\",\n            \"young adults\",\n            \"date night\"\n        ],\n        \"action\": [\n            \"action fans\",\n            \"young males\",\n            \"thrill seekers\"\n        ],\n        \"drama\": [\n            \"general audience\",\n            \"film enthusiasts\",\n            \"mature viewers\"\n        ],\n        \"comedy\": [\n            \"general audience\",\n            \"young adults\",\n            \"family\"\n        ],\n        \"horror\": [\n            \"horror fans\",\n            \"young adults\",\n            \"thrill seekers\"\n        ],\n        \"fantasy\": [\n            \"fantasy fans\",\n            \"young adults\",\n            \"escapism seekers\"\n        ]\n    };\n    const audiences = [];\n    genres.forEach((genre)=>{\n        if (audienceMap[genre]) {\n            audiences.push(...audienceMap[genre]);\n        }\n    });\n    // Generate tags from themes and cultural keywords\n    const tags = [\n        ...themes,\n        ...culturalKeywords,\n        ...genres\n    ].map((tag)=>tag.toLowerCase().replace(/\\s+/g, \"_\"));\n    return {\n        audiences: [\n            ...new Set(audiences)\n        ].slice(0, 5),\n        tags: [\n            ...new Set(tags)\n        ].slice(0, 10),\n        entityType: \"urn:entity:movie\"\n    };\n}\nasync function getSimilarMoviesFromQloo(vibeParameters, originalMovie) {\n    if (!process.env.QLOO_API_KEY) {\n        console.log(\"⚠️ No Qloo API key provided, using fallback movies\");\n        return getFallbackSimilarMovies(vibeParameters, originalMovie);\n    }\n    console.log(\"\\uD83D\\uDD0D Fetching similar movies from Qloo with vibe parameters:\", vibeParameters);\n    try {\n        // Build the Qloo API request with proper vibe-based parameters\n        const params = new URLSearchParams();\n        params.append(\"filter.type\", \"urn:entity:movie\");\n        // Use the strongest signal first - interests based on primary vibe\n        const primaryVibe = vibeParameters.primaryMood || \"emotional\";\n        const vibeIntensity = vibeParameters.vibeIntensity || \"medium\";\n        // Map vibe characteristics to Qloo signals\n        if (vibeParameters.audiences && vibeParameters.audiences.length > 0) {\n            // Use the most relevant audience\n            params.append(\"signal.demographics.audiences\", vibeParameters.audiences[0]);\n            console.log(\"\\uD83C\\uDFAF Using audience signal:\", vibeParameters.audiences[0]);\n        }\n        // Add tag-based interests\n        if (vibeParameters.tags && vibeParameters.tags.length > 0) {\n            const qlooTags = vibeParameters.tags.slice(0, 3).map((tag)=>`urn:tag:keyword:media:${tag.replace(/[^a-zA-Z0-9]/g, \"_\").toLowerCase()}`);\n            params.append(\"signal.interests.tags\", qlooTags.join(\",\"));\n            console.log(\"\\uD83C\\uDFF7️ Using tag signals:\", qlooTags);\n        }\n        // Add location for better results\n        params.append(\"signal.location.query\", \"United States\");\n        params.append(\"limit\", \"8\");\n        const url = `https://hackathon.api.qloo.com/v2/insights/?${params.toString()}`;\n        console.log(\"\\uD83C\\uDF10 Qloo API URL:\", url);\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"X-Api-Key\": process.env.QLOO_API_KEY,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        console.log(\"\\uD83D\\uDCE1 Qloo API response status:\", response.status);\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"❌ Qloo API error:\", errorText);\n            // Try simpler approach with just location and primary genre\n            return await trySimplifiedQlooQuery(vibeParameters, originalMovie);\n        }\n        const data = await response.json();\n        console.log(\"\\uD83D\\uDCE6 Qloo movies response entities count:\", data.results?.entities?.length || 0);\n        const movies = data.results?.entities || [];\n        if (movies.length === 0) {\n            console.log(\"⚠️ No movies returned from Qloo, trying simplified query\");\n            return await trySimplifiedQlooQuery(vibeParameters, originalMovie);\n        }\n        const filteredMovies = movies.filter((movie)=>movie.name?.toLowerCase() !== originalMovie.toLowerCase()).map((movie)=>transformQlooMovieResponse(movie, vibeParameters)).slice(0, 6);\n        console.log(\"✅ Successfully processed\", filteredMovies.length, \"movie recommendations\");\n        return filteredMovies;\n    } catch (error) {\n        console.error(\"❌ Qloo movie search failed:\", error);\n        return getFallbackSimilarMovies(vibeParameters, originalMovie);\n    }\n}\nasync function trySimplifiedQlooQuery(vibeParameters, originalMovie) {\n    console.log(\"\\uD83D\\uDD04 Trying simplified Qloo query...\");\n    try {\n        const params = new URLSearchParams();\n        params.append(\"filter.type\", \"urn:entity:movie\");\n        params.append(\"signal.location.query\", \"United States\");\n        // Use just the primary genre/theme as a simple query\n        const primaryTag = vibeParameters.tags[0] || \"drama\";\n        params.append(\"query\", primaryTag);\n        params.append(\"limit\", \"8\");\n        const url = `https://hackathon.api.qloo.com/v2/insights/?${params.toString()}`;\n        console.log(\"\\uD83C\\uDF10 Simplified Qloo API URL:\", url);\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"X-Api-Key\": process.env.QLOO_API_KEY,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (response.ok) {\n            const data = await response.json();\n            const movies = data.results?.entities || [];\n            if (movies.length > 0) {\n                console.log(\"✅ Simplified query successful with\", movies.length, \"results\");\n                return movies.filter((movie)=>movie.name?.toLowerCase() !== originalMovie.toLowerCase()).map((movie)=>transformQlooMovieResponse(movie, vibeParameters)).slice(0, 6);\n            }\n        }\n        throw new Error(\"Simplified query also failed\");\n    } catch (error) {\n        console.log(\"❌ Simplified query failed, using vibe-based fallback movies\");\n        return getFallbackSimilarMovies(vibeParameters, originalMovie);\n    }\n}\nfunction transformQlooMovieResponse(qlooMovie, vibeParameters) {\n    const title = qlooMovie.name || \"Unknown Movie\";\n    const description = qlooMovie.properties?.description || \"A compelling film experience\";\n    const year = qlooMovie.properties?.release_year || null;\n    const rating = qlooMovie.properties?.rating || null;\n    // Calculate match score based on shared elements\n    const movieKeywords = qlooMovie.properties?.keywords?.map((k)=>k.name.toLowerCase()) || [];\n    const vibeKeywords = vibeParameters.tags.map((t)=>t.toLowerCase());\n    const sharedElements = movieKeywords.filter((keyword)=>vibeKeywords.some((vibeKeyword)=>keyword.includes(vibeKeyword) || vibeKeyword.includes(keyword)));\n    const matchScore = Math.min(0.95, 0.6 + sharedElements.length * 0.08);\n    const reason = generateMovieMatchReason(title, sharedElements, vibeParameters);\n    return {\n        title,\n        description,\n        year,\n        rating,\n        matchScore,\n        reason,\n        sharedElements: sharedElements.length > 0 ? sharedElements : vibeParameters.tags.slice(0, 3),\n        qloo_data: {\n            entity_id: qlooMovie.entity_id,\n            type: qlooMovie.type\n        }\n    };\n}\nfunction generateMovieMatchReason(title, sharedElements, vibeParameters) {\n    if (sharedElements.length > 2) {\n        return `${title} shares key thematic elements including ${sharedElements.slice(0, 2).join(\", \")}, making it a strong match for similar audiences`;\n    } else if (sharedElements.length > 0) {\n        return `${title} resonates with similar ${sharedElements[0]} themes and cultural sensibilities`;\n    } else {\n        return `${title} appeals to similar audiences interested in ${vibeParameters.audiences[0] || \"thoughtful cinema\"}`;\n    }\n}\nfunction getFallbackSimilarMovies(vibeParameters, originalMovie) {\n    console.log(\"\\uD83D\\uDCDD Generating vibe-based fallback recommendations for:\", originalMovie);\n    console.log(\"\\uD83C\\uDFAD Using vibe parameters:\", vibeParameters);\n    const { primaryMood, vibeIntensity, tags } = vibeParameters;\n    // Comprehensive movie database organized by vibes\n    const moviesByVibe = {\n        // Sci-Fi & Futuristic Vibes\n        \"sci-fi\": [\n            {\n                title: \"Blade Runner 2049\",\n                year: 2017,\n                description: \"Visually stunning cyberpunk sequel exploring identity and humanity\",\n                vibeMatch: [\n                    \"futuristic\",\n                    \"philosophical\",\n                    \"visual\"\n                ]\n            },\n            {\n                title: \"Arrival\",\n                year: 2016,\n                description: \"Thoughtful alien contact film about communication and time\",\n                vibeMatch: [\n                    \"cerebral\",\n                    \"emotional\",\n                    \"sci-fi\"\n                ]\n            },\n            {\n                title: \"Ex Machina\",\n                year: 2014,\n                description: \"Intimate AI thriller about consciousness and humanity\",\n                vibeMatch: [\n                    \"psychological\",\n                    \"sci-fi\",\n                    \"philosophical\"\n                ]\n            },\n            {\n                title: \"Interstellar\",\n                year: 2014,\n                description: \"Epic space odyssey about love transcending dimensions\",\n                vibeMatch: [\n                    \"epic\",\n                    \"emotional\",\n                    \"sci-fi\"\n                ]\n            },\n            {\n                title: \"Her\",\n                year: 2013,\n                description: \"Romantic drama about human-AI relationship\",\n                vibeMatch: [\n                    \"romantic\",\n                    \"futuristic\",\n                    \"emotional\"\n                ]\n            }\n        ],\n        // Action & Intense Vibes\n        \"action\": [\n            {\n                title: \"Mad Max: Fury Road\",\n                year: 2015,\n                description: \"High-octane post-apocalyptic action masterpiece\",\n                vibeMatch: [\n                    \"intense\",\n                    \"visual\",\n                    \"action\"\n                ]\n            },\n            {\n                title: \"John Wick\",\n                year: 2014,\n                description: \"Stylish revenge thriller with incredible action choreography\",\n                vibeMatch: [\n                    \"stylish\",\n                    \"intense\",\n                    \"action\"\n                ]\n            },\n            {\n                title: \"The Raid\",\n                year: 2011,\n                description: \"Brutal martial arts action film in confined setting\",\n                vibeMatch: [\n                    \"intense\",\n                    \"martial_arts\",\n                    \"action\"\n                ]\n            },\n            {\n                title: \"Baby Driver\",\n                year: 2017,\n                description: \"Music-driven heist film with kinetic energy\",\n                vibeMatch: [\n                    \"stylish\",\n                    \"musical\",\n                    \"action\"\n                ]\n            }\n        ],\n        // Romance & Emotional Vibes\n        \"romance\": [\n            {\n                title: \"La La Land\",\n                year: 2016,\n                description: \"Modern musical about love and dreams in Los Angeles\",\n                vibeMatch: [\n                    \"romantic\",\n                    \"musical\",\n                    \"emotional\"\n                ]\n            },\n            {\n                title: \"Call Me By Your Name\",\n                year: 2017,\n                description: \"Beautiful coming-of-age romance set in Italy\",\n                vibeMatch: [\n                    \"romantic\",\n                    \"coming_of_age\",\n                    \"emotional\"\n                ]\n            },\n            {\n                title: \"The Shape of Water\",\n                year: 2017,\n                description: \"Fantasy romance between woman and amphibian creature\",\n                vibeMatch: [\n                    \"romantic\",\n                    \"fantasy\",\n                    \"unique\"\n                ]\n            },\n            {\n                title: \"Eternal Sunshine of the Spotless Mind\",\n                year: 2004,\n                description: \"Unique romance about memory and love\",\n                vibeMatch: [\n                    \"romantic\",\n                    \"psychological\",\n                    \"unique\"\n                ]\n            }\n        ],\n        // Dark & Psychological Vibes\n        \"thriller\": [\n            {\n                title: \"Gone Girl\",\n                year: 2014,\n                description: \"Psychological thriller about marriage and deception\",\n                vibeMatch: [\n                    \"psychological\",\n                    \"dark\",\n                    \"thriller\"\n                ]\n            },\n            {\n                title: \"Zodiac\",\n                year: 2007,\n                description: \"Meticulous procedural about the Zodiac killer investigation\",\n                vibeMatch: [\n                    \"dark\",\n                    \"investigative\",\n                    \"psychological\"\n                ]\n            },\n            {\n                title: \"Prisoners\",\n                year: 2013,\n                description: \"Intense thriller about desperate father searching for daughter\",\n                vibeMatch: [\n                    \"intense\",\n                    \"dark\",\n                    \"thriller\"\n                ]\n            },\n            {\n                title: \"Shutter Island\",\n                year: 2010,\n                description: \"Psychological thriller set in mysterious psychiatric facility\",\n                vibeMatch: [\n                    \"psychological\",\n                    \"mystery\",\n                    \"dark\"\n                ]\n            }\n        ],\n        // Drama & Character-Driven Vibes\n        \"drama\": [\n            {\n                title: \"Manchester by the Sea\",\n                year: 2016,\n                description: \"Deeply emotional drama about grief and family\",\n                vibeMatch: [\n                    \"emotional\",\n                    \"family\",\n                    \"drama\"\n                ]\n            },\n            {\n                title: \"Moonlight\",\n                year: 2016,\n                description: \"Beautiful coming-of-age story told in three acts\",\n                vibeMatch: [\n                    \"coming_of_age\",\n                    \"emotional\",\n                    \"character_study\"\n                ]\n            },\n            {\n                title: \"There Will Be Blood\",\n                year: 2007,\n                description: \"Epic character study of greed and ambition\",\n                vibeMatch: [\n                    \"character_study\",\n                    \"epic\",\n                    \"dark\"\n                ]\n            },\n            {\n                title: \"The Social Network\",\n                year: 2010,\n                description: \"Sharp drama about Facebook's creation and betrayal\",\n                vibeMatch: [\n                    \"character_study\",\n                    \"modern\",\n                    \"drama\"\n                ]\n            }\n        ],\n        // Comedy & Light Vibes\n        \"comedy\": [\n            {\n                title: \"The Grand Budapest Hotel\",\n                year: 2014,\n                description: \"Whimsical Wes Anderson comedy about European hotel\",\n                vibeMatch: [\n                    \"whimsical\",\n                    \"visual\",\n                    \"comedy\"\n                ]\n            },\n            {\n                title: \"Knives Out\",\n                year: 2019,\n                description: \"Clever whodunit with excellent ensemble cast\",\n                vibeMatch: [\n                    \"clever\",\n                    \"ensemble\",\n                    \"mystery\"\n                ]\n            },\n            {\n                title: \"Hunt for the Wilderpeople\",\n                year: 2016,\n                description: \"Heartwarming New Zealand adventure comedy\",\n                vibeMatch: [\n                    \"heartwarming\",\n                    \"adventure\",\n                    \"comedy\"\n                ]\n            }\n        ],\n        // Horror & Suspense Vibes\n        \"horror\": [\n            {\n                title: \"Hereditary\",\n                year: 2018,\n                description: \"Deeply unsettling family horror about grief and trauma\",\n                vibeMatch: [\n                    \"psychological\",\n                    \"family\",\n                    \"horror\"\n                ]\n            },\n            {\n                title: \"Get Out\",\n                year: 2017,\n                description: \"Social thriller combining horror with racial commentary\",\n                vibeMatch: [\n                    \"social\",\n                    \"psychological\",\n                    \"horror\"\n                ]\n            },\n            {\n                title: \"The Witch\",\n                year: 2015,\n                description: \"Period horror about Puritan family and witchcraft\",\n                vibeMatch: [\n                    \"atmospheric\",\n                    \"period\",\n                    \"horror\"\n                ]\n            }\n        ],\n        // Fantasy & Magical Vibes\n        \"fantasy\": [\n            {\n                title: \"Pan's Labyrinth\",\n                year: 2006,\n                description: \"Dark fairy tale blending reality and fantasy\",\n                vibeMatch: [\n                    \"fantasy\",\n                    \"dark\",\n                    \"magical\"\n                ]\n            },\n            {\n                title: \"The Shape of Water\",\n                year: 2017,\n                description: \"Romantic fantasy about love conquering difference\",\n                vibeMatch: [\n                    \"romantic\",\n                    \"fantasy\",\n                    \"unique\"\n                ]\n            },\n            {\n                title: \"Am\\xe9lie\",\n                year: 2001,\n                description: \"Whimsical French film about joy and human connection\",\n                vibeMatch: [\n                    \"whimsical\",\n                    \"heartwarming\",\n                    \"french\"\n                ]\n            }\n        ]\n    };\n    // Find movies that match the detected vibe\n    let selectedMovies = [];\n    // First, try to match based on primary tags\n    tags.forEach((tag)=>{\n        if (moviesByVibe[tag]) {\n            selectedMovies.push(...moviesByVibe[tag]);\n        }\n    });\n    // If no direct matches, try related vibes based on mood\n    if (selectedMovies.length === 0) {\n        const moodToVibes = {\n            \"dark\": [\n                \"thriller\",\n                \"horror\",\n                \"drama\"\n            ],\n            \"intense\": [\n                \"action\",\n                \"thriller\"\n            ],\n            \"emotional\": [\n                \"drama\",\n                \"romance\"\n            ],\n            \"light\": [\n                \"comedy\",\n                \"fantasy\"\n            ],\n            \"atmospheric\": [\n                \"thriller\",\n                \"horror\",\n                \"sci-fi\"\n            ]\n        };\n        if (primaryMood && moodToVibes[primaryMood]) {\n            moodToVibes[primaryMood].forEach((vibe)=>{\n                if (moviesByVibe[vibe]) {\n                    selectedMovies.push(...moviesByVibe[vibe]);\n                }\n            });\n        }\n    }\n    // Fallback to drama if still no matches\n    if (selectedMovies.length === 0) {\n        selectedMovies = moviesByVibe[\"drama\"];\n    }\n    // Remove duplicates and the original movie\n    const uniqueMovies = selectedMovies.filter((movie, index, self)=>movie.title.toLowerCase() !== originalMovie.toLowerCase() && index === self.findIndex((m)=>m.title === movie.title)).slice(0, 6);\n    // Add match scores and reasons based on vibe alignment\n    return uniqueMovies.map((movie, index)=>{\n        const sharedVibeElements = movie.vibeMatch.filter((vibe)=>tags.some((tag)=>tag.includes(vibe) || vibe.includes(tag)));\n        const matchScore = Math.max(0.6, 0.8 - index * 0.03 + sharedVibeElements.length * 0.05);\n        const reason = sharedVibeElements.length > 0 ? `Shares ${sharedVibeElements.join(\", \")} vibes with similar ${primaryMood || \"emotional\"} tone` : `Matches the ${primaryMood || \"emotional\"} and ${vibeIntensity || \"medium\"} intensity vibe`;\n        return {\n            title: movie.title,\n            description: movie.description,\n            year: movie.year,\n            rating: 7.0 + Math.random() * 2.5,\n            matchScore,\n            reason,\n            sharedElements: sharedVibeElements.length > 0 ? sharedVibeElements : tags.slice(0, 3)\n        };\n    });\n}\nasync function POST(request) {\n    const startTime = Date.now();\n    try {\n        console.log(\"=== Starting movie analysis ===\");\n        const { movieName } = await request.json();\n        if (!movieName) {\n            console.error(\"No movie name provided\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"No movie name provided\"\n            }, {\n                status: 400\n            });\n        }\n        // Check API keys\n        if (!process.env.HUGGINGFACE_API_KEY) {\n            console.error(\"Missing HUGGINGFACE_API_KEY\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Server configuration error: Missing Hugging Face API key\"\n            }, {\n                status: 500\n            });\n        }\n        // Step 1: Analyze movie with Hugging Face\n        console.log(\"Step 1: Analyzing movie with Hugging Face...\");\n        let movieAnalysis;\n        try {\n            movieAnalysis = await analyzeMovieWithHF(movieName);\n            console.log(\"✅ Movie analysis:\", movieAnalysis);\n        } catch (error) {\n            console.error(\"❌ Hugging Face movie analysis failed:\", error);\n            movieAnalysis = intelligentMovieAnalysis(movieName);\n            console.log(\"\\uD83D\\uDCDD Using fallback movie analysis\");\n        }\n        // Step 2: Generate vibe parameters\n        console.log(\"Step 2: Generating vibe parameters...\");\n        const vibeParameters = generateVibeParameters(movieAnalysis);\n        console.log(\"✅ Vibe parameters:\", vibeParameters);\n        // Step 3: Get similar movies from Qloo\n        console.log(\"Step 3: Getting similar movies...\");\n        let similarMovies;\n        try {\n            similarMovies = await getSimilarMoviesFromQloo(vibeParameters, movieName);\n            console.log(\"✅ Similar movies received:\", similarMovies.length);\n        } catch (error) {\n            console.error(\"❌ Movie recommendations failed:\", error);\n            similarMovies = getFallbackSimilarMovies(vibeParameters, movieName);\n            console.log(\"\\uD83D\\uDCDD Using fallback movie recommendations\");\n        }\n        const processingTime = Date.now() - startTime;\n        console.log(`✅ Total processing time: ${processingTime}ms`);\n        const response = {\n            movieAnalysis,\n            vibeParameters,\n            similarMovies,\n            processingTime\n        };\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(response);\n    } catch (error) {\n        console.error(\"\\uD83D\\uDCA5 Critical error in movie analysis:\", error);\n        const errorResponse = {\n            error: \"Movie analysis failed\",\n            details: error instanceof Error ? error.message : \"Unknown error occurred\",\n            code: \"MOVIE_ANALYSIS_ERROR\"\n        };\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(errorResponse, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze-movie/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-movie%2Froute&page=%2Fapi%2Fanalyze-movie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-movie%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-validator&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();