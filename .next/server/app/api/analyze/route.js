"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var C_Users_krish_Desktop_vibe_val_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/api/analyze/route.ts */ \"(rsc)/./app/api/analyze/route.ts\");\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\krish\\\\Desktop\\\\vibe-val\\\\app\\\\api\\\\analyze\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_krish_Desktop_vibe_val_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_2__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/analyze/route\";\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNrcmlzaCU1Q0Rlc2t0b3AlNUN2aWJlLXZhbCU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDa3Jpc2glNUNEZXNrdG9wJTVDdmliZS12YWwmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQzhCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ2lKOztBQUVqSiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtdmFsLz9iMzVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXGtyaXNoXFxcXERlc2t0b3BcXFxcdmliZS12YWxcXFxcYXBwXFxcXGFwaVxcXFxhbmFseXplXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXplL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYW5hbHl6ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGtyaXNoXFxcXERlc2t0b3BcXFxcdmliZS12YWxcXFxcYXBwXFxcXGFwaVxcXFxhbmFseXplXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FuYWx5emUvcm91dGVcIjtcbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analyze/route.ts":
/*!**********************************!*\
  !*** ./app/api/analyze/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\n// Hugging Face models\nconst HF_IMAGE_MODEL = \"https://api-inference.huggingface.co/models/Salesforce/blip2-opt-2.7b\";\nconst HF_TEXT_MODEL = \"https://api-inference.huggingface.co/models/microsoft/DialoGPT-large\";\nconst HF_CULTURAL_MODEL = \"https://api-inference.huggingface.co/models/meta-llama/Llama-2-7b-chat-hf\";\nasync function analyzeImageWithHF(imageBase64) {\n    if (!process.env.HUGGINGFACE_API_KEY) {\n        throw new Error(\"Missing Hugging Face API key\");\n    }\n    console.log(\"\\uD83D\\uDD0D Calling Hugging Face BLIP-2...\");\n    const response = await fetch(HF_IMAGE_MODEL, {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${process.env.HUGGINGFACE_API_KEY}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            inputs: imageBase64,\n            parameters: {\n                max_new_tokens: 150,\n                do_sample: true,\n                temperature: 0.7,\n                top_p: 0.9\n            }\n        })\n    });\n    console.log(\"\\uD83D\\uDCE1 HF Image API response status:\", response.status);\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"❌ HF Image API error response:\", errorText);\n        throw new Error(`Hugging Face Image API error: ${response.status} - ${errorText}`);\n    }\n    const result = await response.json();\n    console.log(\"\\uD83D\\uDCE6 HF Image API raw result:\", JSON.stringify(result, null, 2));\n    // Handle different response formats from HF\n    if (Array.isArray(result) && result.length > 0) {\n        const description = result[0].generated_text || result[0].caption || result[0].text || \"Unable to analyze image\";\n        console.log(\"✅ Extracted description:\", description);\n        return description;\n    }\n    if (typeof result === \"object\" && result.generated_text) {\n        console.log(\"✅ Extracted description:\", result.generated_text);\n        return result.generated_text;\n    }\n    if (typeof result === \"object\" && result.error) {\n        throw new Error(`Hugging Face error: ${result.error}`);\n    }\n    console.log(\"⚠️ Unexpected HF response format, using fallback\");\n    return \"A space requiring cultural analysis\";\n}\nasync function analyzeVibeWithHF(imageDescription) {\n    const prompt = `Analyze this space description for cultural vibes and aesthetics: \"${imageDescription}\"\r\n\r\nTask: Extract cultural and aesthetic information from this description and format as JSON.\r\n\r\nPlease identify:\r\n- Primary aesthetic style (e.g., \"modern minimalist\", \"vintage bohemian\", \"industrial chic\")\r\n- Secondary style elements\r\n- Cultural context and meaning\r\n- Aesthetic keywords\r\n- Mood descriptors\r\n\r\nRespond with only a JSON object in this exact format:\r\n{\r\n  \"primaryVibe\": \"main aesthetic style\",\r\n  \"secondaryVibes\": [\"secondary\", \"style\", \"elements\"],\r\n  \"culturalContext\": \"brief cultural meaning explanation\",\r\n  \"aestheticKeywords\": [\"style\", \"design\", \"keywords\"],\r\n  \"moodDescriptors\": [\"emotional\", \"mood\", \"words\"]\r\n}`;\n    try {\n        // Try Llama-2 first (better for structured tasks)\n        const response = await fetch(HF_CULTURAL_MODEL, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${process.env.HUGGINGFACE_API_KEY}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                inputs: prompt,\n                parameters: {\n                    max_new_tokens: 300,\n                    temperature: 0.3,\n                    do_sample: true,\n                    top_p: 0.7,\n                    return_full_text: false\n                }\n            })\n        });\n        if (response.ok) {\n            const result = await response.json();\n            let generatedText = \"\";\n            if (Array.isArray(result) && result.length > 0) {\n                generatedText = result[0].generated_text || \"\";\n            } else if (typeof result === \"object\" && result.generated_text) {\n                generatedText = result.generated_text;\n            }\n            // Try to extract JSON from response\n            const jsonMatch = generatedText.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                try {\n                    return JSON.parse(jsonMatch[0]);\n                } catch (parseError) {\n                    console.log(\"JSON parse failed, using fallback analysis\");\n                }\n            }\n        }\n    } catch (error) {\n        console.log(\"Llama model failed, using fallback analysis\");\n    }\n    // Fallback: Intelligent parsing based on keywords in description\n    return intelligentVibeAnalysis(imageDescription);\n}\nfunction intelligentVibeAnalysis(description) {\n    const lowerDesc = description.toLowerCase();\n    // Define vibe patterns\n    const vibePatterns = {\n        \"modern minimalist\": [\n            \"clean\",\n            \"simple\",\n            \"white\",\n            \"minimal\",\n            \"contemporary\",\n            \"sleek\"\n        ],\n        \"vintage rustic\": [\n            \"wood\",\n            \"rustic\",\n            \"vintage\",\n            \"old\",\n            \"traditional\",\n            \"antique\"\n        ],\n        \"industrial chic\": [\n            \"metal\",\n            \"industrial\",\n            \"concrete\",\n            \"steel\",\n            \"urban\",\n            \"loft\"\n        ],\n        \"bohemian eclectic\": [\n            \"colorful\",\n            \"artistic\",\n            \"eclectic\",\n            \"plants\",\n            \"textiles\",\n            \"boho\"\n        ],\n        \"luxury elegant\": [\n            \"elegant\",\n            \"luxury\",\n            \"gold\",\n            \"marble\",\n            \"expensive\",\n            \"refined\"\n        ],\n        \"cozy casual\": [\n            \"cozy\",\n            \"comfortable\",\n            \"warm\",\n            \"casual\",\n            \"soft\",\n            \"relaxed\"\n        ],\n        \"contemporary sophisticated\": [\n            \"modern\",\n            \"sophisticated\",\n            \"stylish\",\n            \"designed\",\n            \"curated\"\n        ]\n    };\n    // Find best matching vibe\n    let bestVibe = \"contemporary\";\n    let bestScore = 0;\n    for (const [vibe, keywords] of Object.entries(vibePatterns)){\n        const score = keywords.reduce((acc, keyword)=>{\n            return acc + (lowerDesc.includes(keyword) ? 1 : 0);\n        }, 0);\n        if (score > bestScore) {\n            bestScore = score;\n            bestVibe = vibe;\n        }\n    }\n    // Extract aesthetic keywords from description\n    const aestheticWords = [\n        \"modern\",\n        \"vintage\",\n        \"rustic\",\n        \"elegant\",\n        \"minimal\",\n        \"colorful\",\n        \"dark\",\n        \"bright\",\n        \"wooden\",\n        \"metal\",\n        \"glass\",\n        \"fabric\",\n        \"leather\",\n        \"stone\",\n        \"ceramic\",\n        \"plastic\",\n        \"clean\",\n        \"messy\",\n        \"organized\",\n        \"artistic\",\n        \"functional\",\n        \"decorative\"\n    ];\n    const foundKeywords = aestheticWords.filter((word)=>lowerDesc.includes(word));\n    // Generate mood descriptors\n    const moodMappings = {\n        \"modern minimalist\": [\n            \"calm\",\n            \"focused\",\n            \"serene\"\n        ],\n        \"vintage rustic\": [\n            \"nostalgic\",\n            \"warm\",\n            \"homey\"\n        ],\n        \"industrial chic\": [\n            \"edgy\",\n            \"urban\",\n            \"creative\"\n        ],\n        \"bohemian eclectic\": [\n            \"free-spirited\",\n            \"artistic\",\n            \"vibrant\"\n        ],\n        \"luxury elegant\": [\n            \"sophisticated\",\n            \"refined\",\n            \"exclusive\"\n        ],\n        \"cozy casual\": [\n            \"comfortable\",\n            \"relaxed\",\n            \"intimate\"\n        ],\n        \"contemporary sophisticated\": [\n            \"polished\",\n            \"trendy\",\n            \"confident\"\n        ]\n    };\n    const secondaryVibes = vibePatterns[bestVibe] || [\n        \"contemporary\",\n        \"stylish\"\n    ];\n    const moodDescriptors = moodMappings[bestVibe] || [\n        \"modern\",\n        \"appealing\"\n    ];\n    return {\n        primaryVibe: bestVibe,\n        secondaryVibes: secondaryVibes.slice(0, 3),\n        culturalContext: `This space embodies a ${bestVibe} aesthetic, reflecting contemporary design sensibilities and cultural preferences for ${moodDescriptors.join(\", \")} environments.`,\n        aestheticKeywords: foundKeywords.length > 0 ? foundKeywords.slice(0, 5) : [\n            \"contemporary\",\n            \"designed\"\n        ],\n        moodDescriptors: moodDescriptors\n    };\n}\nasync function getRecommendationsFromQloo(vibeAnalysis, location = \"Delhi\") {\n    if (!process.env.QLOO_API_KEY) {\n        console.log(\"⚠️ No Qloo API key provided, using fallback\");\n        return getFallbackRecommendations(vibeAnalysis);\n    }\n    console.log(\"\\uD83D\\uDD0D Starting Qloo API integration...\");\n    const { aestheticKeywords, primaryVibe, moodDescriptors } = vibeAnalysis;\n    const recommendations = [];\n    // Simplified categories for better success rate\n    const categories = [\n        {\n            type: \"urn:entity:place\",\n            category: \"restaurants\",\n            queryTerms: [\n                \"restaurant\",\n                \"dining\"\n            ]\n        },\n        {\n            type: \"urn:entity:place\",\n            category: \"experiences\",\n            queryTerms: [\n                \"venue\",\n                \"attraction\"\n            ]\n        }\n    ];\n    for (const categoryConfig of categories){\n        try {\n            console.log(`🔍 Fetching ${categoryConfig.category} from Qloo...`);\n            const items = await fetchQlooRecommendations(categoryConfig.type, categoryConfig.queryTerms, aestheticKeywords.slice(0, 2), location);\n            recommendations.push({\n                category: categoryConfig.category,\n                items: items.map((item)=>transformQlooResponse(item, vibeAnalysis)).slice(0, 2)\n            });\n            console.log(`✅ Got ${items.length} ${categoryConfig.category} recommendations`);\n        } catch (error) {\n            console.error(`❌ Error fetching ${categoryConfig.category}:`, error);\n            // Add fallback category data\n            recommendations.push({\n                category: categoryConfig.category,\n                items: getFallbackCategoryItems(categoryConfig.category, vibeAnalysis)\n            });\n        }\n    }\n    // Add music and activities as fallback (since Qloo music API might be different)\n    recommendations.push({\n        category: \"music\",\n        items: getFallbackCategoryItems(\"music\", vibeAnalysis)\n    });\n    recommendations.push({\n        category: \"activities\",\n        items: getFallbackCategoryItems(\"activities\", vibeAnalysis)\n    });\n    return recommendations;\n}\n// Fallback recommendation functions\nfunction getFallbackRecommendations(vibeAnalysis) {\n    console.log(\"\\uD83D\\uDCDD Generating fallback recommendations\");\n    const categories = [\n        \"restaurants\",\n        \"activities\",\n        \"music\",\n        \"experiences\"\n    ];\n    return categories.map((category)=>({\n            category,\n            items: getFallbackCategoryItems(category, vibeAnalysis)\n        }));\n}\nfunction getFallbackCategoryItems(category, vibeAnalysis) {\n    const { primaryVibe, aestheticKeywords, moodDescriptors } = vibeAnalysis;\n    const fallbackData = {\n        restaurants: [\n            {\n                id: \"1\",\n                name: `${primaryVibe.charAt(0).toUpperCase() + primaryVibe.slice(1)} Bistro`,\n                description: `A restaurant that embodies ${primaryVibe} dining with ${aestheticKeywords.join(\", \")} elements`,\n                reason: `Matches your ${primaryVibe} aesthetic with sophisticated ambiance`,\n                confidence: 0.75,\n                tags: [\n                    ...aestheticKeywords.slice(0, 3),\n                    \"dining\",\n                    \"restaurant\"\n                ],\n                rating: 4.2\n            },\n            {\n                id: \"2\",\n                name: `The ${moodDescriptors[0] || \"Contemporary\"} Table`,\n                description: `Contemporary dining space reflecting ${moodDescriptors.join(\", \")} atmosphere`,\n                reason: `Complements the ${primaryVibe} vibe with curated dining experience`,\n                confidence: 0.72,\n                tags: [\n                    ...moodDescriptors.slice(0, 2),\n                    \"contemporary\",\n                    \"dining\"\n                ],\n                rating: 4.0\n            }\n        ],\n        music: [\n            {\n                id: \"1\",\n                name: `${primaryVibe.charAt(0).toUpperCase() + primaryVibe.slice(1)} Playlist`,\n                description: `Curated music selection perfect for ${primaryVibe} spaces`,\n                reason: `Sound design that complements ${primaryVibe} aesthetics`,\n                confidence: 0.80,\n                tags: [\n                    ...aestheticKeywords.slice(0, 2),\n                    \"playlist\",\n                    \"ambient\"\n                ],\n                rating: 4.5\n            },\n            {\n                id: \"2\",\n                name: `${moodDescriptors[0] || \"Contemporary\"} Soundscape`,\n                description: `Audio experiences that match ${moodDescriptors.join(\", \")} moods`,\n                reason: `Musical elements that enhance the ${primaryVibe} atmosphere`,\n                confidence: 0.76,\n                tags: [\n                    ...moodDescriptors.slice(0, 2),\n                    \"soundscape\",\n                    \"ambient\"\n                ],\n                rating: 4.3\n            }\n        ],\n        activities: [\n            {\n                id: \"1\",\n                name: `${primaryVibe.charAt(0).toUpperCase() + primaryVibe.slice(1)} Gallery Experience`,\n                description: `Cultural activities that celebrate ${primaryVibe} aesthetics`,\n                reason: `Activities aligned with ${primaryVibe} cultural sensibilities`,\n                confidence: 0.78,\n                tags: [\n                    ...aestheticKeywords.slice(0, 3),\n                    \"culture\",\n                    \"gallery\"\n                ],\n                rating: 4.4\n            },\n            {\n                id: \"2\",\n                name: `${moodDescriptors[0] || \"Contemporary\"} Workshop`,\n                description: `Hands-on experiences in ${moodDescriptors.join(\", \")} environments`,\n                reason: `Interactive activities that match your ${primaryVibe} preferences`,\n                confidence: 0.74,\n                tags: [\n                    ...moodDescriptors.slice(0, 2),\n                    \"workshop\",\n                    \"creative\"\n                ],\n                rating: 4.1\n            }\n        ],\n        experiences: [\n            {\n                id: \"1\",\n                name: `${primaryVibe.charAt(0).toUpperCase() + primaryVibe.slice(1)} Space Tour`,\n                description: `Curated experiences showcasing ${primaryVibe} design and culture`,\n                reason: `Experiences that celebrate ${primaryVibe} aesthetic principles`,\n                confidence: 0.77,\n                tags: [\n                    ...aestheticKeywords.slice(0, 3),\n                    \"tour\",\n                    \"experience\"\n                ],\n                rating: 4.3\n            },\n            {\n                id: \"2\",\n                name: `The ${moodDescriptors[0] || \"Contemporary\"} Experience`,\n                description: `Immersive experiences designed for ${moodDescriptors.join(\", \")} appreciation`,\n                reason: `Tailored experiences that resonate with ${primaryVibe} values`,\n                confidence: 0.73,\n                tags: [\n                    ...moodDescriptors.slice(0, 2),\n                    \"immersive\",\n                    \"curated\"\n                ],\n                rating: 4.2\n            }\n        ]\n    };\n    return fallbackData[category] || [];\n}\nasync function fetchQlooRecommendations(entityType, categoryTerms, vibeKeywords, location) {\n    // Construct search query combining category and vibe (simplified)\n    const searchTerms = [\n        ...categoryTerms,\n        ...vibeKeywords.slice(0, 2)\n    ].join(\" \");\n    const encodedLocation = encodeURIComponent(location);\n    const encodedQuery = encodeURIComponent(searchTerms);\n    // Simplified URL construction\n    const url = `https://hackathon.api.qloo.com/v2/insights/?filter.type=${entityType}&filter.location.query=${encodedLocation}&query=${encodedQuery}&limit=3`;\n    console.log(\"\\uD83C\\uDF10 Qloo API URL:\", url);\n    console.log(\"\\uD83D\\uDD11 Using API key:\", process.env.QLOO_API_KEY ? \"Present\" : \"Missing\");\n    const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n            \"X-Api-Key\": process.env.QLOO_API_KEY,\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    console.log(\"\\uD83D\\uDCE1 Qloo API response status:\", response.status);\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"❌ Qloo API error response:\", errorText);\n        throw new Error(`Qloo API error: ${response.status} - ${errorText}`);\n    }\n    const data = await response.json();\n    console.log(\"\\uD83D\\uDCE6 Qloo API response:\", JSON.stringify(data, null, 2));\n    return data.results?.entities || [];\n}\nfunction transformQlooResponse(qlooEntity, vibeAnalysis) {\n    const { primaryVibe } = vibeAnalysis;\n    // Extract relevant information from Qloo response\n    const name = qlooEntity.name || \"Recommended Item\";\n    const description = qlooEntity.properties?.description || \"A recommendation that matches your vibe\";\n    const address = qlooEntity.properties?.address || \"\";\n    const website = qlooEntity.properties?.website || \"\";\n    const rating = qlooEntity.properties?.business_rating || 0;\n    const keywords = qlooEntity.properties?.keywords?.slice(0, 3).map((k)=>k.name) || [];\n    // Generate confidence based on keyword matches\n    const keywordMatches = keywords.filter((keyword)=>vibeAnalysis.aestheticKeywords.some((vibeKeyword)=>keyword.toLowerCase().includes(vibeKeyword.toLowerCase()) || vibeKeyword.toLowerCase().includes(keyword.toLowerCase())));\n    const confidence = Math.min(0.95, 0.6 + keywordMatches.length * 0.1 + rating * 0.05);\n    // Generate reason based on vibe match\n    const reason = generateMatchReason(qlooEntity, primaryVibe, keywordMatches);\n    return {\n        id: qlooEntity.entity_id || Math.random().toString(36),\n        name,\n        description: address ? `${description} Located at ${address}` : description,\n        reason,\n        confidence,\n        tags: keywords,\n        website,\n        rating,\n        qloo_data: {\n            entity_id: qlooEntity.entity_id,\n            type: qlooEntity.type,\n            subtype: qlooEntity.subtype\n        }\n    };\n}\nfunction generateMatchReason(entity, primaryVibe, keywordMatches) {\n    const name = entity.name || \"This recommendation\";\n    const hasKeywordMatch = keywordMatches.length > 0;\n    const rating = entity.properties?.business_rating || 0;\n    if (hasKeywordMatch && rating >= 4) {\n        return `${name} perfectly captures the ${primaryVibe} aesthetic with highly-rated ${keywordMatches.join(\", \")} elements`;\n    } else if (hasKeywordMatch) {\n        return `${name} aligns with your ${primaryVibe} vibe through its ${keywordMatches.join(\", \")} characteristics`;\n    } else if (rating >= 4) {\n        return `${name} is a highly-rated venue that complements the ${primaryVibe} cultural sensibility`;\n    } else {\n        return `${name} matches the ${primaryVibe} aesthetic and cultural context`;\n    }\n}\nasync function POST(request) {\n    const startTime = Date.now();\n    try {\n        console.log(\"=== Starting analysis ===\");\n        const { imageBase64 } = await request.json();\n        if (!imageBase64) {\n            console.error(\"No image provided\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"No image provided\"\n            }, {\n                status: 400\n            });\n        }\n        // Check API keys\n        if (!process.env.HUGGINGFACE_API_KEY) {\n            console.error(\"Missing HUGGINGFACE_API_KEY\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Server configuration error: Missing Hugging Face API key\"\n            }, {\n                status: 500\n            });\n        }\n        // Step 1: Analyze image with Hugging Face\n        console.log(\"Step 1: Analyzing image with Hugging Face...\");\n        let imageDescription;\n        try {\n            imageDescription = await analyzeImageWithHF(imageBase64);\n            console.log(\"✅ Image description:\", imageDescription);\n        } catch (error) {\n            console.error(\"❌ Hugging Face image analysis failed:\", error);\n            imageDescription = \"A space with modern aesthetic elements and contemporary design features\";\n            console.log(\"\\uD83D\\uDCDD Using fallback description\");\n        }\n        // Step 2: Analyze vibe with Hugging Face\n        console.log(\"Step 2: Analyzing vibe with Hugging Face...\");\n        let vibeAnalysis;\n        try {\n            vibeAnalysis = await analyzeVibeWithHF(imageDescription);\n            console.log(\"✅ Vibe analysis:\", vibeAnalysis);\n        } catch (error) {\n            console.error(\"❌ Vibe analysis failed:\", error);\n            vibeAnalysis = {\n                primaryVibe: \"contemporary\",\n                secondaryVibes: [\n                    \"modern\",\n                    \"stylish\"\n                ],\n                culturalContext: \"A space with contemporary appeal and modern sensibilities\",\n                aestheticKeywords: [\n                    \"modern\",\n                    \"contemporary\",\n                    \"stylish\"\n                ],\n                moodDescriptors: [\n                    \"sophisticated\",\n                    \"clean\",\n                    \"appealing\"\n                ]\n            };\n            console.log(\"\\uD83D\\uDCDD Using fallback vibe analysis\");\n        }\n        // Step 3: Get recommendations from Qloo\n        console.log(\"Step 3: Getting recommendations...\");\n        let recommendations;\n        try {\n            if (process.env.QLOO_API_KEY) {\n                console.log(\"\\uD83D\\uDD0D Attempting Qloo API integration...\");\n                recommendations = await getRecommendationsFromQloo(vibeAnalysis);\n                console.log(\"✅ Qloo recommendations received\");\n            } else {\n                console.log(\"⚠️ No Qloo API key, using fallback recommendations\");\n                recommendations = getFallbackRecommendations(vibeAnalysis);\n            }\n        } catch (error) {\n            console.error(\"❌ Qloo API failed:\", error);\n            console.log(\"\\uD83D\\uDCDD Using fallback recommendations\");\n            recommendations = getFallbackRecommendations(vibeAnalysis);\n        }\n        const processingTime = Date.now() - startTime;\n        console.log(`✅ Total processing time: ${processingTime}ms`);\n        const response = {\n            imageDescription,\n            vibeAnalysis,\n            recommendations,\n            processingTime\n        };\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(response);\n    } catch (error) {\n        console.error(\"\\uD83D\\uDCA5 Critical error in analysis:\", error);\n        const errorResponse = {\n            error: \"Analysis failed\",\n            details: error instanceof Error ? error.message : \"Unknown error occurred\",\n            code: \"ANALYSIS_ERROR\"\n        };\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(errorResponse, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckrish%5CDesktop%5Cvibe-val&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();